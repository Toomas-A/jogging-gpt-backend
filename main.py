from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel
import openai
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = FastAPI()

# üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–ª–æ—è
@app.get("/", response_class=HTMLResponse)
def read_root():
    return """
    <h1>‚úÖ Jogging GPT Backend is Running</h1>
    <p>POST your data to <code>/gpt</code> to get running shoe recommendations.</p>
    """

# üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
class GPTRequest(BaseModel):
    prompt: str

# ü§ñ –ú–∞—Ä—à—Ä—É—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ GPT
@app.post("/gpt")
async def ask_gpt(request: GPTRequest):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # –ò–ª–∏ "gpt-3.5-turbo" –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –±–µ–≥–æ–≤—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫."},
                {"role": "user", "content": request.prompt}
            ],
            temperature=0.7,
            max_tokens=800
        )

        reply = response.choices[0].message["content"]
        return JSONResponse(content={"reply": reply})

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})
